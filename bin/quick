#!/usr/bin/env ruby

# typed: strict
# frozen_string_literal: true

lib_dir = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'clone'
require 'push'
require 'pr'
require 'create'

module Quick
  class << self
    def clone(url)
      Clone.clone_repository(url)
    end

    def push(message = nil)
      Push.push_changes(message)
    end

    def pr
      PR.open_pr_page
    end

    def create(name, is_private: false)
      Create.create_repository(name, is_private: is_private)
    end

    def help
      puts <<~HEREDOC
        Quick CLI - Easily manage cloned repositories
        Commands:
          clone [URL]     - Clone a repository into ~/src/[username]/[reponame]
          push [MESSAGE]  - Push and commit your current changes with an optional message
          pr              - Open a new PR page on GitHub for the current repository
          create NAME     - Create a new GitHub repository and clone it
                            Use '-p' flag for a private repository
          help            - Show this help message
      HEREDOC
    end
  end
end

case ARGV[0]
when 'clone'
  Quick.clone(ARGV[1])
when 'push'
  Quick.push(ARGV[1])
when 'pr'
  Quick.pr
when 'create'
  name = ARGV[1]
  is_private = ARGV.include?('-p')
  Quick.create(name, is_private: is_private)
when 'help'
  Quick.help
else
  puts 'Unknown command. Use "quick help" for a list of available commands.'
  Quick.help
end
